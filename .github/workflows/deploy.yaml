name: Build and Deploy to Cloud Run 🚀

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: csc371-376900
  GAR_LOCATION: us-west1
  SERVICE: hiring-registration-system
  STAGING_SERVICE: hiring-registration-system-stage
  PROD_SERVICE: hiring-registration-system-prod
  REGION: us-west1

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     token_format: 'access_token'
      #     workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
      #     service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      - name: Google Auth ☁️
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          token_format: access_token

      # - name: 'Set up Cloud SDK'
        # uses: 'google-github-actions/setup-gcloud@v1'
        # with:
        # version: '>= 363.0.0'

        # - gcloud config set project csc371-376900
        # - gcloud auth activate-service-account --key-file '${{ secrets.GCP_CREDENTIALS }}'
        # - gcloud builds submit --tag gcr.io/csc371-376900/



      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth 📦
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Push Container 🏗️
        run: |-
          docker build --build-arg SECRET_KEY='${{ secrets.SECRET_KEY }}' --cache-from=node:18-alpine --cache-from=python:3.9-alpine -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/hiringsystem:${{ github.sha }}" ./ 
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/hiringsystem:${{ github.sha }}"

      # END - Docker auth and build

      - name: STAGING - Deploy to Cloud Run 🚀
        id: staging-deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.STAGING_SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/hiringsystem:${{ github.sha }}

      - name: Run integration tests 🧪
        id: test
        run: |-
          ./health.sh "${{ steps.staging-deploy.outputs.url }}" >> $GITHUB_OUTPUT
          echo ::set-output name=exit_code::$?

      - uses: JasonEtco/create-an-issue@v2
        if: steps.test.outputs.exit_code == 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filename: .github/AUTOMATIC_ISSUE_TEMPLATE.md
          ADJECTIVE: ${{ join(steps.test.outputs.*, '\n') }}

      - name: Force Failure 👎
        if: steps.test.outputs.exit_code == 1
        run: exit 1

      - name: PROD - Deploy to Cloud Run 🚀
        id: prod-deploy
        if: steps.test.outputs.exit_code == 0
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.PROD_SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/hiringsystem:${{ github.sha }}

      - name: Show Prod URL
        if: steps.test.outputs.exit_code == 0
        run: echo ${{ steps.prod-deploy.outputs.url }}


